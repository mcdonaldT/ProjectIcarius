<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create the level

// Resize the Room
room_width = (CELL_WIDTH/16) * 720;
room_height = (CELL_HEIGHT/16) * 720;

// Set the grid width and height
var width = room_width div CELL_WIDTH;
var height = room_height div CELL_HEIGHT;

// Create the grid
grid = ds_grid_create(width, height);

// Create the pathfinding grid
grid_path = mp_grid_create(0, 0, width, height, CELL_WIDTH, CELL_HEIGHT);

// Fill the grid with the void
ds_grid_set_region(grid, 0, 0, width-1, height-1, VOID);

// Get the seed to load a room
/*
if( show_question("Do you have a room seed?")){
    var key = get_string("What is the room seed?","");
    ini_open("Save.ini");
    var seed = ini_read_real("Rooms", key, 0);
    random_set_seed(seed);
} else{
    randomize();
}
*/
//Randomize the world
randomize();

//Create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

//Create the player
instance_create(cx*CELL_WIDTH+CELL_WIDTH/2, cy*CELL_HEIGHT+CELL_HEIGHT/2, Player);

// Give the controller a random direction
var cdir = irandom(3);

// The odds variable for changing direction
var odds = 1;

// Create the level using 1000 steps
repeat(1000){
    //Place a floor tile at the controller position using an accessor 
    grid[# cx, cy] = FLOOR;
    //Randomize the direction of the controller
    if(irandom(odds) == odds) {
        cdir = irandom(3);  
    }
    
    // Move the controller to the new position to create new floor tile
    var xdir = lengthdir_x(1, cdir*90);
    var ydir = lengthdir_y(1, cdir*90);
    cx += xdir;
    cy += ydir;
    
    //Ensure you don't move outside of the grid by at least one cell
    cx = clamp(cx, 1, width-2);
    cy = clamp(cy, 1, height-2);

}
//Step through y and x of the grid to set walls
for(var yy=1; yy&lt;height-1;yy++){
    for(var xx=1;xx&lt;width-1;xx++){
        if(grid[# xx, yy] == FLOOR){
        //CHECK FOR THE WALLS
            if(grid[# xx+1, yy] != FLOOR) grid[# xx+1, yy] = WALL;
            if(grid[# xx-1, yy] != FLOOR) grid[# xx-1, yy] = WALL;
            if(grid[# xx, yy+1] != FLOOR) grid[# xx, yy+1] = WALL;
            if(grid[# xx, yy-1] != FLOOR) grid[# xx, yy-1] = WALL;
        }
    
    }
}
//Add the walls and remove single walls
for(var yy=1; yy&lt;height-1;yy++){
    for(var xx=1;xx&lt;width-1;xx++){
        if(grid[# xx, yy] == WALL &amp;&amp; grid[# xx+1, yy] == FLOOR  &amp;&amp; grid[# xx-1, yy] == FLOOR  &amp;&amp; grid[# xx, yy+1] == FLOOR  &amp;&amp; grid[# xx, yy-1] == FLOOR ){
            grid[# xx, yy] = FLOOR;
            
        }
        
    
    }
}
// Draw the level using the grid
for(var yy=0; yy&lt;height;yy++){
    for(var xx=0; xx&lt;width; xx++){
        if(grid[# xx, yy] == FLOOR){
            // Draw the floor
            tile_add(bg_floor, 0,0,CELL_WIDTH, CELL_HEIGHT, xx*CELL_WIDTH, yy*CELL_HEIGHT, 0);
            
            // Add some enemies at random
            var odds = 15;
            var ex = xx*CELL_WIDTH+CELL_WIDTH/2
            var ey = yy*CELL_HEIGHT+CELL_HEIGHT/2
            if(point_distance(ex, ey, Player.x, Player.y) &gt; 80 &amp;&amp; irandom(odds)==odds){
              instance_create(ex,ey, Enemy);  
            } 
        } else{
        //Makes the walls forbidden to the motion planning path finding grid
            mp_grid_add_cell(grid_path, xx, yy);
            physics_fixture_create();
        }
    
    }

}

// Get tile sizes
var tw = CELL_WIDTH/2;
var th = CELL_HEIGHT/2;

//Add the Tiles
for( var yy=0; yy&lt; height*2; yy++){
    for ( var xx=0; xx&lt; width*2; xx++){
        if(grid[# xx div 2, yy div 2] == FLOOR){
            // Get the tile position in the room of x and y
            var tx = xx * tw;
            var ty = yy * th;
            // Move before you convert
            var right = grid[# (xx+1) div 2, yy div 2] != FLOOR ;
            var left = grid[# (xx-1) div 2, yy div 2] != FLOOR;
            var top = grid[# xx div 2, (yy-1) div 2] != FLOOR;
            var bottom = grid[# xx div 2, (yy+1) div 2] != FLOOR;

            var top_right = grid[# (xx+1) div 2, (yy-1) div 2] != FLOOR;
            var top_left = grid[# (xx-1) div 2, (yy-1) div 2] != FLOOR;
            var bottom_right = grid[# (xx+1) div 2, (yy+1) div 2] != FLOOR;
            var bottom_left = grid[# (xx-1) div 2, (yy+1) div 2] != FLOOR;
            
            if (right) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*4, th*1, tw, th, tx+tw, ty, -ty);
                } else if (top) {
                    if (top_right) {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx+tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*0, th*1, tw, th, tx+tw, ty, -ty);
                }
            }
            
            if (left) {
                if (bottom) {
                    tile_add(bg_walltiles, tw*3, th*1, tw, th, tx-tw, ty, -ty);
                } else if (top) {
                    if (top_left) {
                        tile_add(bg_walltiles, tw*3, th*0, tw, th, tx-tw, ty-th, -ty);
                    } else {
                        tile_add(bg_walltiles, tw*4, th*0, tw, th, tx, ty-th, -ty);
                    }
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                } else {
                    tile_add(bg_walltiles, tw*2, th*1, tw, th, tx-tw, ty, -ty);
                }
            }
            
            if (top) {
                if (!top_right) {
                    tile_add(bg_walltiles, tw*2, th*2, tw, th, tx, ty-th, -ty);
                } else if (!top_left) {
                    tile_add(bg_walltiles, tw*0, th*2, tw, th, tx, ty-th, -ty);
                } else {
                    tile_add(bg_walltiles, tw*1, th*2, tw, th, tx, ty-th, -ty);
                }
            }
            
            if (bottom) {
                if (!bottom_right) {
                    tile_add(bg_walltiles, tw*2, th*0, tw, th, tx, ty, -ty-tw);
                } else if (!bottom_left) {
                    tile_add(bg_walltiles, tw*0, th*0, tw, th, tx, ty, -ty-tw);
                } else {
                    tile_add(bg_walltiles, tw*1, th*0, tw, th, tx, ty, -ty-tw);
                }
            }
        }
    }

} 














</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the grid   
ds_grid_destroy(grid);
mp_grid_destroy(grid_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
